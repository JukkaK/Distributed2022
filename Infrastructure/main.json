{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "13009656001250130120"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "westeurope",
      "metadata": {
        "description": "Location for resources. Default is West Europe."
      }
    },
    "buildtag": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "shortLocation": {
      "westeurope": "we",
      "northeurope": "ne",
      "eastus": "eus"
    },
    "dblocation": {
      "westeurope": "West Europe",
      "northeurope": "North Europe",
      "eastus": "East US"
    },
    "projectName": "distributed",
    "dbName": "[format('cosmos-{0}-we-001', variables('projectName'))]",
    "sbName": "[format('sb-{0}-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])]",
    "egTopicName": "[format('evgt-{0}-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])]",
    "locations": [
      "westeurope",
      "northeurope",
      "eastus"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-data-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-backend-001', variables('projectName'))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-message-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-{1}', variables('dbName'), parameters('buildtag'))]",
      "resourceGroup": "[format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "collection1Name": {
            "value": "warehouseitems"
          },
          "region": {
            "value": "[parameters('location')]"
          },
          "cosmosDBAccountName": {
            "value": "[variables('dbName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "6807287885062004378"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string",
              "defaultValue": "[format('mongodb-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Cosmos DB account name"
              }
            },
            "collection1Name": {
              "type": "string",
              "metadata": {
                "description": "The name for the first Mongo DB collection"
              }
            },
            "region": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "secondaryRegion": {
              "type": "string",
              "defaultValue": "northeurope"
            },
            "tertiaryRegion": {
              "type": "string",
              "defaultValue": "eastus"
            },
            "lawId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[toLower(parameters('cosmosDBAccountName'))]",
              "location": "[parameters('region')]",
              "kind": "MongoDB",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": true,
                "enableMultipleWriteLocations": true,
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Eventual"
                },
                "locations": [
                  {
                    "locationName": "[parameters('region')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  },
                  {
                    "locationName": "[parameters('secondaryRegion')]",
                    "failoverPriority": 1,
                    "isZoneRedundant": false
                  },
                  {
                    "locationName": "[parameters('tertiaryRegion')]",
                    "failoverPriority": 2,
                    "isZoneRedundant": false
                  }
                ],
                "apiProperties": {
                  "serverVersion": "4.2"
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', toLower(parameters('cosmosDBAccountName')), parameters('cosmosDBAccountName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('cosmosDBAccountName')]"
                },
                "options": {
                  "autoscaleSettings": {
                    "maxThroughput": 1000
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosDBAccountName')))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('cosmosDBAccountName')), parameters('cosmosDBAccountName'), parameters('collection1Name'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('collection1Name')]",
                  "shardKey": {
                    "user_id": "Hash"
                  },
                  "indexes": [
                    {
                      "key": {
                        "keys": [
                          "_id"
                        ]
                      }
                    },
                    {
                      "key": {
                        "keys": [
                          "$**"
                        ]
                      }
                    },
                    {
                      "key": {
                        "keys": [
                          "product_name",
                          "product_amount"
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', toLower(parameters('cosmosDBAccountName')), parameters('cosmosDBAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "cs": {
              "type": "string",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBAccountName')), '2022-05-15').connectionStrings[0].connectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')]))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('ai-{0}', parameters('buildtag'))]",
      "resourceGroup": "[format('rg-{0}-backend-001', variables('projectName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "791512746299033544"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            }
          },
          "variables": {
            "applicationInsightsName": "ai-distributed-we-001"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
              }
            }
          ],
          "outputs": {
            "aiKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-backend-001', variables('projectName')))]"
      ]
    },
    {
      "copy": {
        "name": "workerfuncs",
        "count": "[length(variables('locations'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('serviceWorker-{0}', variables('locations')[copyIndex()])]",
      "resourceGroup": "[format('rg-{0}-backend-001', variables('projectName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('locations')[copyIndex()]]"
          },
          "cosmoscs": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('dbName'), parameters('buildtag'))), '2020-10-01').outputs.cs.value]"
          },
          "serviceBusConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-message-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('sbName'), parameters('buildtag'))), '2020-10-01').outputs.serviceBusConnectionString.value]"
          },
          "aiKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', format('ai-{0}', parameters('buildtag'))), '2020-10-01').outputs.aiKey.value]"
          },
          "appName": {
            "value": "backend"
          },
          "dbapiUrl": {
            "value": "[format('https://func-distributed-dbapi-{0}-001.azurewebsites.net/api/db', variables('shortLocation')[variables('locations')[copyIndex()]])]"
          },
          "egUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('egTopicName'), parameters('buildtag'))), '2020-10-01').outputs.uri.value]"
          },
          "egKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('egTopicName'), parameters('buildtag'))), '2020-10-01').outputs.key.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "6300038372594933783"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "metadata": {
                "description": "The name of the function app that you wish to create."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "runtime": {
              "type": "string",
              "defaultValue": "node",
              "allowedValues": [
                "node",
                "dotnet",
                "java"
              ],
              "metadata": {
                "description": "The language worker runtime to load in the function app."
              }
            },
            "cosmoscs": {
              "type": "secureString",
              "defaultValue": ""
            },
            "aiKey": {
              "type": "string"
            },
            "serviceBusConnectionString": {
              "type": "secureString",
              "defaultValue": ""
            },
            "dbapiUrl": {
              "type": "string",
              "defaultValue": "https://func-distributed-dbapi-we-001.azurewebsites.net/api/db"
            },
            "egUri": {
              "type": "secureString",
              "defaultValue": ""
            },
            "egKey": {
              "type": "secureString",
              "defaultValue": ""
            }
          },
          "variables": {
            "shortLocation": "[createObject('westeurope', 'we', 'northeurope', 'ne', 'eastus', 'eus')[parameters('location')]]",
            "functionAppName": "[format('func-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation'))]",
            "storageAccountName": "[format('stgdist{0}{1}002', parameters('appName'), variables('shortLocation'))]",
            "functionWorkerRuntime": "[parameters('runtime')]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "Storage",
              "properties": {}
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'state')]"
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Y1",
                "tier": "Dynamic"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation')))]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(variables('functionAppName'))]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~14"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[parameters('aiKey')]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[variables('functionWorkerRuntime')]"
                    },
                    {
                      "name": "CosmosDbConnectionString",
                      "value": "[parameters('cosmoscs')]"
                    },
                    {
                      "name": "serviceBusConnectionString",
                      "value": "[parameters('serviceBusConnectionString')]"
                    },
                    {
                      "name": "DBAPI_URL",
                      "value": "[parameters('dbapiUrl')]"
                    },
                    {
                      "name": "MyEventGridTopicUriSetting",
                      "value": "[parameters('egUri')]"
                    },
                    {
                      "name": "MyEventGridTopicKeySetting",
                      "value": "[parameters('egKey')]"
                    }
                  ],
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2"
                },
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', format('ai-{0}', parameters('buildtag')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-backend-001', variables('projectName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('dbName'), parameters('buildtag')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('egTopicName'), parameters('buildtag')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-message-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('sbName'), parameters('buildtag')))]"
      ]
    },
    {
      "copy": {
        "name": "dbfuncs",
        "count": "[length(variables('locations'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dbApi-{0}', variables('locations')[copyIndex()])]",
      "resourceGroup": "[format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('locations')[copyIndex()]]"
          },
          "cosmoscs": {
            "value": "[format('{0}{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('dbName'), parameters('buildtag'))), '2020-10-01').outputs.cs.value, variables('dblocation')[variables('locations')[copyIndex()]])]"
          },
          "aiKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', format('ai-{0}', parameters('buildtag'))), '2020-10-01').outputs.aiKey.value]"
          },
          "appName": {
            "value": "dbapi"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "16955276524823216905"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "metadata": {
                "description": "The name of the function app that you wish to create."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "runtime": {
              "type": "string",
              "defaultValue": "node",
              "allowedValues": [
                "node",
                "dotnet",
                "java"
              ],
              "metadata": {
                "description": "The language worker runtime to load in the function app."
              }
            },
            "cosmoscs": {
              "type": "secureString",
              "defaultValue": ""
            },
            "aiKey": {
              "type": "string"
            }
          },
          "variables": {
            "shortLocation": "[createObject('westeurope', 'we', 'northeurope', 'ne', 'eastus', 'eus')[parameters('location')]]",
            "functionAppName": "[format('func-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation'))]",
            "storageAccountName": "[format('stgdb{0}{1}001', parameters('appName'), variables('shortLocation'))]",
            "functionWorkerRuntime": "[parameters('runtime')]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "Storage"
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Y1",
                "tier": "Dynamic"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation')))]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(variables('functionAppName'))]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~14"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[parameters('aiKey')]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[variables('functionWorkerRuntime')]"
                    },
                    {
                      "name": "CosmosDbConnectionString",
                      "value": "[parameters('cosmoscs')]"
                    }
                  ],
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2"
                },
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('plan-distributed-{0}-{1}-001', parameters('appName'), variables('shortLocation')))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', format('ai-{0}', parameters('buildtag')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])), 'Microsoft.Resources/deployments', format('{0}-{1}', variables('dbName'), parameters('buildtag')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-data-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')]))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-{1}', variables('sbName'), parameters('buildtag'))]",
      "resourceGroup": "[format('rg-{0}-message-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sbName": {
            "value": "[variables('sbName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lawId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', 'lawWe'), '2020-10-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "9913251719227747915"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "westeurope",
              "metadata": {
                "description": "Location for resources. Default is West Europe."
              }
            },
            "sbName": {
              "type": "string",
              "metadata": {
                "description": "Event Grid name."
              }
            },
            "lawId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "serviceBusEndpoint": "[format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', parameters('sbName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces",
              "apiVersion": "2022-01-01-preview",
              "name": "[parameters('sbName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('sbName'))]",
              "name": "[format('{0}-law', parameters('sbName'))]",
              "properties": {
                "workspaceId": "[parameters('lawId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('sbName'))]"
              ]
            },
            {
              "type": "Microsoft.ServiceBus/namespaces/queues",
              "apiVersion": "2022-01-01-preview",
              "name": "[format('{0}/{1}', parameters('sbName'), format('{0}-front-queue', parameters('sbName')))]",
              "properties": {
                "defaultMessageTimeToLive": "PT2H5S"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('sbName'))]"
              ]
            }
          ],
          "outputs": {
            "serviceBusConnectionString": {
              "type": "string",
              "value": "[listKeys(variables('serviceBusEndpoint'), '2022-01-01-preview').primaryConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-backend-001', variables('projectName'))), 'Microsoft.Resources/deployments', 'lawWe')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-message-{1}-002', variables('projectName'), variables('shortLocation')[parameters('location')]))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "lawWe",
      "resourceGroup": "[format('rg-{0}-backend-001', variables('projectName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "1529966271508034713"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "westeurope"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "law-distributed-we-001",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', 'law-distributed-we-001')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-backend-001', variables('projectName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-{1}', variables('egTopicName'), parameters('buildtag'))]",
      "resourceGroup": "[format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "egName": {
            "value": "[variables('egTopicName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "6125222983092816481"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "westeurope",
              "metadata": {
                "description": "Location for resources. Default is West Europe."
              }
            },
            "egName": {
              "type": "string",
              "metadata": {
                "description": "Event Grid name."
              }
            }
          },
          "variables": {
            "egEndpoint": "[format('{0}/Topics', resourceId('Microsoft.EventGrid/topics', parameters('egName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.EventGrid/topics",
              "apiVersion": "2022-06-15",
              "name": "[parameters('egName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              }
            }
          ],
          "outputs": {
            "uri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventGrid/topics', parameters('egName')), '2022-06-15').endpoint]"
            },
            "key": {
              "type": "string",
              "value": "[listKeys(variables('egEndpoint'), '2022-06-15').primaryConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-message-{1}-001', variables('projectName'), variables('shortLocation')[parameters('location')]))]"
      ]
    }
  ]
}